{"version":3,"sources":["Logo.js","Header.js","FooterMenuItem1.js","Footer.js","BodyLeft.js","BodyCenter.js","BodyRight.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","Headed","props","version","onClick","console","log","attempt","menu","map","el","key","FooterMenuItem1","href","item","Footer","v","type","onChange","e","target","value","BodyLeft","BodyCenter","BodyRight","Body","App","fisher","fish","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOAWeA,MARf,WACI,OACI,yBAAKC,UAAY,eAAjB,SC+BOC,MA/Bf,SAAgBC,GAMZ,OACK,6BAEG,kBAAC,EAAD,MAFH,IAEYA,EAAMC,QAgBd,4BAAQC,QAxBL,WACRC,QAAQC,IAAI,OACZJ,EAAMK,QAAQ,WAsBT,QACAL,EAAMM,KAAKC,KAAI,SAAAC,GAAE,OAAI,wBAAIC,IAAKD,GAAKA,QCpBjCE,MARf,SAAyBV,GACrB,OACI,yBAAMF,UAAU,kBACZ,uBAAGa,KAAK,KAAKX,EAAMY,KAAnB,OCgBGC,MAhBf,SAAgBb,GAOZ,OACI,yBAAKF,UAAU,UACX,6BAAME,EAAMc,GACZ,2BAAOC,KAAO,OAAOC,SAJd,SAACC,GAAD,OAAKjB,EAAMK,QAAQY,EAAEC,OAAOC,UAKlCnB,EAAMM,KAAKC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAiBI,KAAMJ,SCN1CY,MARf,WACI,OACI,yBAAMtB,UAAU,YACZ,sCCKGuB,MARf,WACI,OACI,yBAAMvB,UAAU,cACb,wCCKIwB,MARf,WACI,OACI,yBAAMxB,UAAU,aACZ,uCCUGyB,MAVf,WACI,OACI,yBAAKzB,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCeG0B,MApBf,WAEI,IACMlB,EAAO,CAAC,QAAS,UAAW,SAC5BmB,EAAS,SAACC,GACZvB,QAAQC,IAAI,QAAUsB,IAG1B,OADAvB,QAAQC,IAAI,SAER,yBAAKN,UAAU,OACX,qCACA,kBAAC6B,EAAD,CAAQ1B,QATG,SASoBK,KAAQA,EAAMD,QAASoB,IACtD,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQX,EAXG,SAWcR,KAAMA,EAAMD,QAASoB,MCPtCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.e2fb5b81.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Logo() {\n    return (\n        <div className = \"TopMenuItem\">\n            Logo\n        </div>\n    );\n}\n\nexport default Logo;\n","import React from 'react';\nimport Logo from \"./Logo\";\nimport TopMenu from \"./TopMenu\";\n\n\nfunction Headed(props) {\n    const add = () => {\n        console.log('Add')\n        props.attempt('shark')\n\n    }\n    return (\n         <div /*className=\"Header\"*/>\n\n            <Logo/> {props.version}\n            {/*<TopMenu/>*/}\n            {/*<ul>*/}\n            {/*    <li> {props.menu[0]}</li>*/}\n            {/*    <li> {props.menu[1]}</li>*/}\n            {/*    <li> {props.menu[2]}</li>*/}\n            {/*</ul>*/}\n            {/*<ul>*/}\n            {/*    {*/}\n            {/*        [*/}\n            {/*            <li key='1qwe'> {props.menu[0]}</li>,*/}\n            {/*            <li key='2qwe'> {props.menu[1]}</li>,*/}\n            {/*            <li key='3qwe'> {props.menu[2]}</li>*/}\n            {/*        ]*/}\n            {/*    }*/}\n            {/*</ul>*/}\n             <button onClick={add}>Add </button>\n            {props.menu.map(el => <li key={el}>{el}</li>)}\n        </div>\n    );\n}\n\nexport default Headed;\n","import React from 'react';\n\n\nfunction FooterMenuItem1(props) {\n    return (\n        <div  className=\"FooterMenuItem\">\n            <a href=\"#\">{props.item} </a>\n        </div>\n    );\n}\n\nexport default FooterMenuItem1;\n","import React from 'react';\nimport FooterMenuItem1 from \"./FooterMenuItem1\";\nimport FooterMenuItem2 from \"./FooterMenuItem2\";\nimport FooterMenuItem3 from \"./FooterMenuItem3\";\n\n\nfunction Footer(props) {\n    const add = () => {\n        console.log('Add')\n        props.attempt('Tilapia ')\n\n    }\n    const change = (e)=>props.attempt(e.target.value)\n    return (\n        <div className=\"Footer\">\n            <div>{props.v}</div>\n            <input type = \"text\" onChange={change}/>\n            {props.menu.map(el => <FooterMenuItem1 item={el}/>)}\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n\n\nfunction BodyLeft() {\n    return (\n        <div  className=\"BodyLeft\">\n            <h2>Left</h2>\n        </div>\n    );\n}\n\nexport default BodyLeft;\n","import React from 'react';\n\n\nfunction BodyCenter() {\n    return (\n        <div  className=\"BodyCenter\">\n           <h2>Center</h2>\n        </div>\n    );\n}\n\nexport default BodyCenter;\n","import React from 'react';\n\n\nfunction BodyRight() {\n    return (\n        <div  className=\"BodyRight\">\n            <h2>Right</h2>\n        </div>\n    );\n}\n\nexport default BodyRight;\n","import React from 'react';\nimport BodyLeft from \"./BodyLeft\";\nimport BodyCenter from \"./BodyCenter\";\nimport BodyRight from \"./BodyRight\";\n\n\nfunction Body() {\n    return (\n        <div className=\"Body\">\n            <BodyLeft />\n            <BodyCenter />\n            <BodyRight />\n        </div>\n    );\n}\n\nexport default Body;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Body from \"./Body\";\n\nfunction App() {\n\n    const AppVersion = '2.3.4.';\n    const menu = ['about', 'product', 'price']\n    const fisher = (fish) =>{\n        console.log('Hello' + fish)\n    }\n    console.log(\"hello\");\n    return (\n        <div className=\"App\">\n            <h1>Hello</h1>\n            <Header version = {AppVersion} menu = {menu} attempt={fisher}/>\n            <Body />\n            <Footer v = {AppVersion} menu={menu} attempt={fisher}/>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}